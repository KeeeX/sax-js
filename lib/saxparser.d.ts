import { ParserEvents, ParserEventsInterface } from "./consts.js";
import { EventHandler, Namespace } from "./types.js";
import { TextOpts } from "./utils.js";
export interface SAXParserOpts extends TextOpts {
    maxBufferLength?: number;
    lowercase?: boolean;
    lowercasetags?: boolean;
    noscript?: boolean;
    strictEntities?: boolean;
    xmlns?: boolean;
    position?: boolean;
}
export default class SAXParser implements ParserEventsInterface {
    ontext: EventHandler | undefined;
    onprocessinginstruction: EventHandler | undefined;
    onsgmldeclaration: EventHandler | undefined;
    ondoctype: EventHandler | undefined;
    oncomment: EventHandler | undefined;
    onopentagstart: EventHandler | undefined;
    onattribute: EventHandler | undefined;
    onopentag: EventHandler | undefined;
    onclosetag: EventHandler | undefined;
    onopencdata: EventHandler | undefined;
    oncdata: EventHandler | undefined;
    onclosecdata: EventHandler | undefined;
    onerror: EventHandler | undefined;
    onend: EventHandler | undefined;
    onready: EventHandler | undefined;
    onscript: EventHandler | undefined;
    onopennamespace: EventHandler | undefined;
    onclosenamespace: EventHandler | undefined;
    private strict;
    private opt;
    private q;
    private c;
    private bufferCheckPosition;
    private maxBufferLength;
    private looseCase;
    private tags;
    private closed;
    private closedRoot;
    private sawRoot;
    private tag;
    private error;
    private noscript;
    private state;
    private strictEntities;
    private parserEntities;
    private attribList;
    private namespace;
    private trackPosition;
    private position;
    private line;
    private column;
    private buffers;
    private startTagPosition;
    private sawDoctype;
    constructor(strict?: boolean, opt?: SAXParserOpts);
    get ns(): Namespace | undefined;
    emit(event: ParserEvents, data?: unknown): void;
    resume(): SAXParser;
    close(): SAXParser;
    flush(): SAXParser;
    write(rawChunk: string | Uint8Array | null): SAXParser;
    end(): SAXParser;
    private resetDefault;
    private fullReset;
    private checkBufferLength;
    private closeText;
    private clearBuffers;
    private emitNode;
    private raiseError;
    private strictFail;
    private beginWhiteSpace;
    private newTag;
    private attrib;
    private openTag;
    private closeTag;
    private parseEntity;
    private flushBuffers;
    private handleBegin;
    private handleText;
    private handleScript;
    private handleScriptEnding;
    private handleOpenWaka;
    private handleSGMLDecl;
    private handleSGMLDeclQuoted;
    private handleDoctype;
    private handleDoctypeQuoted;
    private handleDoctypeDTD;
    private handleDoctypeDTDQuoted;
    private handleComment;
    private handleCommentEnding;
    private handleCommentEnded;
    private handleCData;
    private handleCDataEnding;
    private handleCDataEnding2;
    private handleProcInst;
    private handleProcInstBody;
    private handleProcInstEnding;
    private handleOpenTag;
    private handleOpenTagSlash;
    private handleAttrib;
    private handleAttribName;
    private handleAttribNameSawWhite;
    private handleAttribValue;
    private handleAttribValueQuoted;
    private handleAttribValueClosed;
    private handleAttribValueUnquoted;
    private handleCloseTag;
    private handleCloseTagSawWhite;
    private handleTextEntity;
    private readStateRouter;
}
//# sourceMappingURL=saxparser.d.ts.map